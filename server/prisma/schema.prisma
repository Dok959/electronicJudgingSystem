generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  title String
  User  User[]

  @@map("roles")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  name       String
  sirname    String
  patronymic String?

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  Athlete Athlete[]
  Judge   Judge[]

  @@map("users")
}

model Rank {
  id            Int             @id @default(autoincrement())
  title         String
  Athlete       Athlete[]
  SettingsEvent SettingsEvent[]

  @@map("ranks")
}

model Athlete {
  id          Int       @id @default(autoincrement())
  name        String
  sirname     String
  patronymic  String?
  dateOfBirth DateTime? @db.Date

  rank      Rank  @relation(fields: [rankId], references: [id])
  rankId    Int
  trainer   User? @relation(fields: [trainerId], references: [id])
  trainerId Int?

  PartisipantsIndividual PartisipantsIndividual[]
  AthletesGroup          AthletesGroup[]

  @@map("athletes")
}

model Item {
  id                          Int                           @id @default(autoincrement())
  title                       String
  RaitingIndividual           RaitingIndividual[]
  RaitingGroup                RaitingGroup[]
  Score                       Score[]
  QueuePartisipantsIndividual QueuePartisipantsIndividual[]

  @@map("items")
}

model Event {
  id            Int             @id @default(autoincrement())
  title         String
  startDateTime DateTime?       @db.Timestamptz
  duration      Int             @default(1)
  Judge         Judge[]
  SettingsEvent SettingsEvent[]

  @@map("events")
}

model Judge {
  id          Int           @id @default(autoincrement())
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  PlacesEvent PlacesEvent[]
  Score       Score[]

  @@map("judges")
}

model TypesEvent {
  id            Int             @id @default(autoincrement())
  title         String
  SettingsEvent SettingsEvent[]

  @@map("types")
}

model SettingsEvent {
  id      Int        @id @default(autoincrement())
  event   Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  type    TypesEvent @relation(fields: [typeId], references: [id])
  typeId  Int
  rank    Rank       @relation(fields: [rankId], references: [id])
  rankId  Int

  PartisipantsIndividual PartisipantsIndividual[]
  PartisipantsGroup      PartisipantsGroup[]

  @@map("settingsEvent")
}

model PartisipantsIndividual {
  id                          Int                           @id @default(autoincrement())
  settingsEvent               SettingsEvent                 @relation(fields: [settingsEventId], references: [id], onDelete: Cascade)
  settingsEventId             Int
  athlete                     Athlete                       @relation(fields: [athleteId], references: [id])
  athleteId                   Int
  RaitingIndividual           RaitingIndividual[]
  Score                       Score[]
  QueuePartisipantsIndividual QueuePartisipantsIndividual[]

  @@map("partisipantsIndividual")
}

model QueuePartisipantsIndividual {
  id            Int                    @id @default(autoincrement())
  partisipant   PartisipantsIndividual @relation(fields: [partisipantId], references: [id], onDelete: Cascade)
  partisipantId Int
  item          Item                   @relation(fields: [itemId], references: [id])
  itemId        Int
  queue         Int

  @@map("queuePartisipantsIndividual")
}

model RaitingIndividual {
  id            Int                    @id @default(autoincrement())
  partisipant   PartisipantsIndividual @relation(fields: [partisipantId], references: [id], onDelete: Cascade)
  partisipantId Int
  item          Item                   @relation(fields: [itemId], references: [id])
  itemId        Int

  score Int

  @@map("raitingIndividual")
}

model Group {
  id                Int                 @id @default(autoincrement())
  title             String
  AthletesGroup     AthletesGroup[]
  PartisipantsGroup PartisipantsGroup[]

  @@map("groups")
}

model AthletesGroup {
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   Int
  athlete   Athlete @relation(fields: [athleteId], references: [id])
  athleteId Int

  @@id([groupId, athleteId])
  @@map("athletesGroup")
}

model PartisipantsGroup {
  id              Int            @id @default(autoincrement())
  settingsEvent   SettingsEvent  @relation(fields: [settingsEventId], references: [id], onDelete: Cascade)
  settingsEventId Int
  group           Group          @relation(fields: [groupId], references: [id])
  groupId         Int
  RaitingGroup    RaitingGroup[]

  @@map("partisipantsGroup")
}

model RaitingGroup {
  id                 Int               @id @default(autoincrement())
  partisipantGroup   PartisipantsGroup @relation(fields: [partisipantGroupId], references: [id], onDelete: Cascade)
  partisipantGroupId Int
  item               Item              @relation(fields: [itemId], references: [id])
  itemId             Int

  score Int

  @@map("raitingGroup")
}

model PlacesEvent {
  id      Int   @id @default(autoincrement())
  judge   Judge @relation(fields: [judgeId], references: [id])
  judgeId Int
  place   Place @relation(fields: [placeId], references: [id])
  placeId Int

  @@map("placesEvent")
}

model Place {
  id          Int           @id @default(autoincrement())
  title       String
  PlacesEvent PlacesEvent[]

  @@map("places")
}

model Score {
  id            Int                    @id @default(autoincrement())
  judge         Judge                  @relation(fields: [judgeId], references: [id])
  judgeId       Int
  partisipant   PartisipantsIndividual @relation(fields: [partisipantId], references: [id], onDelete: Cascade)
  partisipantId Int
  item          Item                   @relation(fields: [itemId], references: [id])
  itemId        Int
  score         Float                  @db.DoublePrecision()

  @@map("score")
}
